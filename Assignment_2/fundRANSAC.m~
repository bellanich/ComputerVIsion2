function bestF = fundRANSAC(coords1, coords2, n, p, threshold)
%RANSAC Performs RANSAC algorithm to find coordinate transformation
% IN
%  coords1 : coordinates to be transformed from
%  coords2 : coordinates to be transformed to
%  n : number of tries until best transformation is returned
%  p : size of random subset for which transformation is solved
%  threshold : threshold distance for determining translation correctness
% OUT
%  tform : transformation matrix

if nargin < 3
    n = 50;
end
if nargin < 4
    p = ceil(sqrt(length(coords1) - 1)) + 1;
end
if nargin < 5
    threshold = 10;
end

[ndims, ncoords, ~] = size(coords1);
p = 8;


% bestF = eye(ndims + 1);
% tformCur = eye(ndims + 1);

% make coordinates homogeneous - TODO only if necessary:
if size(coords1, 1) < 3
    coords1 = vertcat(coords1, ones(1, ncoords));
    coords2 = vertcat(coords2, ones(1, ncoords));
end

% sel = zeros(2 * p, 1);
bestScore = -1;
for ii = 1:n
    
    % create selection
    sel = randperm(ncoords, p);
    
    % solve for selection
    Fcur = eightPoint(coords1(:, sel), coords2(:, sel), true);  % 8 points
    
    % score the current Fundamental Matrix Fcur 
    coordsDist = distanceSampson(Fcur, coords1, coords2);   % all points
    score = sum(coordsDist < threshold);
    
    % update transformation matrix if a better one is found
    if score > bestScore || bestScore < 0
        bestF = Fcur;
        bestScore = score;
    end
end
threshold
bestScore
ncoords
end

% ===================================================================
%   helper
% ===================================================================

function ds = distanceSampson (F, pointsO, pointsM)
    % points should be homogeneous: 3 x N  (3rd row ones)
    ds = [];
    noPoints = size(pointsO, 2);
    for ii = 1:noPoints
        pO = pointsO(:, ii);
        pM = pointsM(:, ii);
        da = (pM'*F*pO)^2;   % should be scalar
        FpO = F*pO;
        FpM = F'*pM;
        db = FpO(1)^2 + FpO(2)^2 + FpM(1)^2 + FpM(2)^2; % should be scalar
        ds = [ds da/db];      % added to the list
    end
end

function coordstack = createA(coords)
%CREATECOORDSTACK Creates A matrix for affine transform
% IN
%  coords : input coordinates

[ndims, ncoords, ~] = size(coords);

coordstack = zeros(ndims * ncoords, ndims * (ndims + 1));

atLast = ndims .^ 2 + 1;

% stack pairs for each coordinate
for ii = 0:ncoords-1
    for jj = 1:ndims
        coordstack(ndims * ii + jj, (jj - 1) * ndims + 1:jj * ndims) = ...
            transpose(coords(1:ndims, ii + 1));
    end
    coordstack(ndims * ii + 1:ndims * (ii + 1), atLast:end) = eye(ndims);
end

end


function F = eightPoint(pointsO, pointsM, normalise)
% pointsO and pointsM should be homogeneous: 3 X N matrices
 
if nargin == 2
    normalise = false;
end

if normalise
    [phatO, TO] = normalizeFund(pointsO);
    [phatM, TM] = normalizeFund(pointsM);
    Fnorm = fundamentalMatrix(phatO, phatM);
    %F = TM' * Fnorm * TO;
    F = Fnorm;
else
    F = fundamentalMatrix(pointsO, pointsM);
end
end

%   eight-point helper functions
function [phat, T] = normalizeFund(points)
    noPoints = size(points, 2);
    % normalise
    m = mean(points, 2);
    d = 0;
    for ii = 1:noPoints
        d = d + norm(points(:, ii) - m);
    end
    d = d / noPoints;
    T = [sqrt(2)/d 0 -m(1)*sqrt(2)/d; ...
        0 sqrt(2)/d -m(2)*sqrt(2)/d; ...
        0 0 1];
    phat = T * points;
    % if to test that mean phat = 0 and mean of distances = wortel2
    %{
    disp('test resutls')
    meanphat = mean(phat, 2)      % 0 on x and y, 1 on z. 
    normphat = [];
    for ii = 1:noPoints
        normphat = [normphat, norm(phat(1:2, ii))];
                                    % only norm of x and y
    end
    meannorm = mean(normphat)
    wortel2 = sqrt(2)
    %}
end

function F = fundamentalMatrix(pointsO, pointsM)
    % disp('fundamental matrix calc');
    noPoints = size(pointsO, 2);
    % step 1 - construct matrix A
    A = zeros(noPoints, 9);
    for ii = 1:noPoints
        xO = pointsO(1, ii);
        yO = pointsO(2, ii);
        xM = pointsM(1, ii);
        yM = pointsM(2, ii);
        A(ii, 1) = xO*xM;
        A(ii, 2) = xO*yM;
        A(ii, 3) = xO;
        A(ii, 4) = yO*xM;
        A(ii, 5) = yO*yM;
        A(ii, 6) = yO;
        A(ii, 7) = xM;
        A(ii, 8) = yM;
        A(ii, 9) = 1;        
    end
    % step 2 - SVD
    [U, D, V] = svd(A);
    % step 3 - take column with smallest singular value
    % this is normaly column 9, but if number of points < 9, take that. 
    minCol = min(9, noPoints);
    Fentries = V(:, minCol);      % TODO - make sure V and not V'
    Fnonsing = reshape(Fentries, [3,3]); 
    % step 4 - ensure singularity of F
    [Uf, Df, Vf] = svd(Fnonsing);
    Df(3, 3) = 0;
    F = Uf * Df * Vf';
    % test that F is different from Fnonsing
    Fnonsing - F;
end