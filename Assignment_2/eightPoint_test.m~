function [] = eightPoint_test(image1, image2, F_type)
%{
    :params:
    image1 = filepath for first image
    image 2 = filepath for second image

    F_type: method for fundamental matrix that you want to use,
    possible arguements are: 'F1', 'F2', and 'F3'
%}

% Loading images
image1 = imread(image1);
image2 = imread(image2);

Ia = im2single(image1);
Ib = im2single(image2);

% Performing keypoint matching
thresh = 5;
[matches, fa, fb] = keypoint_matching(Ia, Ib, thresh);

% Reformating results from keypoint matching to get pointsO and pointsM
nr_matches = size(matches,2);
m1 = matches(1, :);
m2 = matches(2, :);
pointsO = fa(1:2, m1);
pointsM = fb(1:2, m2);
pointsO = cat(1, pointsO, ones(1, size(pointsO, 2)));
pointsM = cat(1, pointsM, ones(1, size(pointsM, 2)));

% Calling helper function to plot results
epipolar_plot(image1, image2, pointsO, pointsM, F_type) 
end

% ================== Helper Function ===================
% Used to generate the epipolar lines and plot them on the image
function [] = epipolar_plot(image1, image2, pointsO, pointsM, F_type)

% Determining F_type to use
if F_type == 'F1'
    F = eight_Point(pointsO, pointsM);
elseif F_type == 'F2'
    F = eight_Point(pointsO, pointsM, true);
elseif F_type == 'F3'
    n = 500;
    p = 8;
    thresh = 0.5;
    F = fundRANSAC(pointsO, pointsM, n, p, thresh);
end

% plots feature-matching points for image 1
figure; 
subplot(121);
imshow(image1); hold on;
title('Inliers and Epipolar Lines in First Image');
plot(pointsO(1,:), pointsO(2,:), 'go')

% plots feature-matching points for image 2
subplot(122); 
imshow(image2);
title('Inliers and Epipolar Lines in Second Image'); hold on;
plot(pointsM(1,:), pointsM(2,:),'go')

% showing epipolar lines on image2
epiLines = epipolarLine(F,(pointsO(1:2, :))');
points = lineToBorderPoints(epiLines,size(image2));
line(points(:,[1,3])', points(:,[2,4])');
%truesize;

end
% ===============================================================
%                   Eight points algorithm functions
% ===============================================================
function F = eight_Point(pointsO, pointsM, normalise)
% pointsO and pointsM should be homogeneous: 3 X N matrices
 
if nargin == 2
    normalise = false;
end

if normalise
    [phatO, TO] = normalizeFund(pointsO);
    [phatM, TM] = normalizeFund(pointsM);
    Fnorm = fundamentalMatrix(phatO, phatM);
    F = TM' * Fnorm * TO;
else
    F = fundamentalMatrix(pointsO, pointsM);
end
end

%   eight-point helper functions
function [phat, T] = normalizeFund(points)
    noPoints = size(points, 2);
    % normalise
    m = mean(points, 2);
    d = 0;
    for ii = 1:noPoints
        d = d + norm(points(:, ii) - m);
    end
    d = d / noPoints;
    T = [sqrt(2)/d 0 -m(1)*sqrt(2)/d; ...
        0 sqrt(2)/d -m(2)*sqrt(2)/d; ...
        0 0 1];
    phat = T * points;
    % if to test that mean phat = 0 and mean of distances = wortel2
    %{
    disp('test resutls')
    meanphat = mean(phat, 2)      % 0 on x and y, 1 on z. 
    normphat = [];
    for ii = 1:noPoints
        normphat = [normphat, norm(phat(1:2, ii))];
                                    % only norm of x and y
    end
    meannorm = mean(normphat)
    wortel2 = sqrt(2)
    %}
end

function F = fundamentalMatrix(pointsO, pointsM)
    % disp('fundamental matrix calc');
    noPoints = size(pointsO, 2);
    % step 1 - construct matrix A
    A = zeros(noPoints, 9);
    for ii = 1:noPoints
        xO = pointsO(1, ii);
        yO = pointsO(2, ii);
        xM = pointsM(1, ii);
        yM = pointsM(2, ii);
        A(ii, 1) = xO*xM;
        A(ii, 2) = xO*yM;
        A(ii, 3) = xO;
        A(ii, 4) = yO*xM;
        A(ii, 5) = yO*yM;
        A(ii, 6) = yO;
        A(ii, 7) = xM;
        A(ii, 8) = yM;
        A(ii, 9) = 1;        
    end
    % step 2 - SVD
    [U, D, V] = svd(A);
    % step 3 - take column with smallest singular value
    % this is normaly column 9, but if number of points < 9, take that. 
    minCol = min(9, noPoints);
    Fentries = V(:, minCol);      % TODO - make sure V and not V'
    Fnonsing = reshape(Fentries, [3,3]); 
    % step 4 - ensure singularity of F
    [Uf, Df, Vf] = svd(Fnonsing);
    Df(3, 3) = 0;
    F = Uf * Df * Vf';
    % test that F is different from Fnonsing
    Fnonsing - F;
end